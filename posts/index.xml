<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Tim Holzschuh</title><link>https://tholzschuh.github.io/posts/</link><description>Recent content in Posts on Tim Holzschuh</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 23 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://tholzschuh.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Using espanso to conveniently type unicode characters</title><link>https://tholzschuh.github.io/posts/espanso/</link><pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate><guid>https://tholzschuh.github.io/posts/espanso/</guid><description>Peter Haine recently made me aware of the possibility of using a text expander to conveniently type unicode characters like Œ†, ‚ü∂ and ùíû by typing things like :Pi:, :to: and :scC:.
After a quick search for available options, I decided to give espanso a try.
While the official package hub offers some packages with snippets relevant to mathematicians, I wasn&amp;rsquo;t really satisfied with any of the available options and instead started adding all the symbols I might need manually.</description></item><item><title>tikzcd snippets for VS Code</title><link>https://tholzschuh.github.io/posts/latex-snippets/</link><pubDate>Thu, 11 Aug 2022 00:00:00 +0000</pubDate><guid>https://tholzschuh.github.io/posts/latex-snippets/</guid><description>For writing LaTeX documents, I use VS Code together with the latex-workshop extension.
One thing I particularly like about VS Code is its built-in support for snippets and how easy it is to implement your own.
As there aren&amp;rsquo;t any extensions in the marketplace providing snippets for commutative diagrams, I implemented some using tikz-cd on my own:
Demonstration This is what using the snippets looks like:
Result: I cycle through the preselected X, Y, S, T by pressing tab, which makes it very convenient to change the objects&amp;rsquo; names appearing in the diagram.</description></item><item><title>Declarative and reproducible system and user management with NixOS</title><link>https://tholzschuh.github.io/posts/declarative-and-reproducible-system-and-user-management-with-nixos/</link><pubDate>Wed, 14 Jul 2021 18:15:26 +0200</pubDate><guid>https://tholzschuh.github.io/posts/declarative-and-reproducible-system-and-user-management-with-nixos/</guid><description>I&amp;rsquo;ve been using NixOS as my main operating system for quite some time now.
As I recently upgraded my computer equipment by acquiring a new laptop, I decided that it&amp;rsquo;s time to invest some more time into further capitalizing on the features of NixOS. The main purpose of this post is to collect all the things I learned while doing so in a single place so that I&amp;rsquo;ll always be able to look it up again if need be.</description></item><item><title>Using LaTeX with Hakyll</title><link>https://tholzschuh.github.io/posts/using-latex-with-hakyll/</link><pubDate>Tue, 12 Jan 2021 18:13:04 +0200</pubDate><guid>https://tholzschuh.github.io/posts/using-latex-with-hakyll/</guid><description>Since Hakyll is tightly integrated with Pandoc, it&amp;rsquo;s easy to use LaTeX with Hakyll by enabling Pandoc&amp;rsquo;s LaTeX compile features. Most explanations I found online, like this one, seem to be quite outdated though and they don&amp;rsquo;t work verbatim.
The basic idea still is to set up a custom pandoc compiler using the
pandocCompilerWith :: ReaderOptions -&amp;gt; WriterOptions -&amp;gt; Compiler (Item String) function, but the internals used in the WriterOptions have changed.</description></item></channel></rss>